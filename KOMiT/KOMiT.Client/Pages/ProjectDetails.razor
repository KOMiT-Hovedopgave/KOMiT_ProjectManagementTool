@page "/projectdetails/{ID:int}"
@using KOMiT.Core.Model;
@inject HttpClient _httpClient
@inject NavigationManager navigationManager


<div class="parent">
    <div class="div1">
        <table>
            <tbody>
                <tr>
                    <td>
                        <b>Projekt: @_project.Name</b>
                    </td>
                </tr>
                <tr>
                    <td>
                        <b>Startdato: @_project.EstimatedStartDate.ToShortDateString() <Icon Name="IconName.Calendar" Color="IconColor.Primary"></Icon></b>
                    </td>
                </tr>
                <tr>
                    <td>
                        <b>Slutdato: @_project.EstimatedEndDate.ToShortDateString() <Icon Name="IconName.Calendar" Color="IconColor.Primary"></Icon></b>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div style="margin-bottom: 30px;">
    <table class="main-table">
        <tbody>
            <tr>
                <td> </td>
                <td><a class="is-link" style="cursor: pointer;">Opstartsfase</a></td>
                <td><a class="is-link" style="cursor: pointer;">Kravindsamling</a></td>
                <td><a class="is-link" style="cursor: pointer;">High-level design</a></td>
                <td><a class="is-link" style="cursor: pointer;">Low-level design</a></td>
                <td><a class="is-link" style="cursor: pointer;">Programmering</a></td>
                <td><a @onclick="() => PhaseDetails(ID)" class="is-link" style="cursor: pointer;">Testing</a></td>
            </tr>
            <tr>
                <td class="bold-text">Status:</td>
                <td>2,2</td>
                <td>2,3</td>
                <td>2,4</td>
                <td>2,5</td>
                <td>2,6</td>
                <td>2,7</td>
                <td>2,8</td>
            </tr>
            <tr>
                <td class="bold-text">Estimeret dage:</td>
                <td>3,2</td>
                <td>3,3</td>
                <td>3,4</td>
                <td>3,5</td>
                <td>3,6</td>
                <td>3,7</td>
                <td>3,8</td>
            </tr>
            <tr>
                <td class="bold-text">Realiseret dage:</td>
                <td>4,2</td>
                <td>4,3</td>
                <td>4,4</td>
                <td>4,5</td>
                <td>4,6</td>
                <td>4,7</td>
                <td>4,8</td>
            </tr>
        </tbody>
    </table>
</div>

<div class="container">
    <div class="row">
        <div class="col-md-5">
            <PieChart @ref="pieChart" Width="450" />
        </div>
        <div class="col-md-7">
            <LineChart @ref="lineChart" Width="850" />
        </div>
    </div>
</div>


<style>
    .main-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background-color: aliceblue;
    }

        .main-table, .main-table th, .main-table td {
            border: 1px solid black;
        }

            .main-table th, .main-table td {
                padding: 10px;
                text-align: left;
            }

    .bold-text {
        font-weight: bold;
    }
</style>


@code {

    private void PhaseDetails(int ID)
    {
        navigationManager.NavigateTo($"/phasedetails/{ID}");
    }

    [Parameter]
    public int ID { get; set; }

    private Project _project;

    protected override async Task OnInitializedAsync()
    {
        _project = await _httpClient.GetFromJsonAsync<Project>($"https://localhost:7282/api/project/GetDetailsById/{ID}");
    }

    private PieChart pieChart = default!;
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData = default!;
    private string[]? backgroundColors;

    private int datasetsCount = 0;
    private int dataLabelsCount = 0;

    protected override void OnInitialized()
    {
        backgroundColors = ColorBuilder.CategoricalTwelveColors;
        chartData = new ChartData { Labels = GetDefaultDataLabels(2), Datasets = GetDefaultDataSets() };

        pieChartOptions = new();
        pieChartOptions.Responsive = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await pieChart.InitializeAsync(chartData, pieChartOptions);
            await RenderWormAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private List<IChartDataset> GetDefaultDataSets()
    {
        var datasets = new List<IChartDataset>();

        datasets.Add(new PieChartDataset
            {
                Label = "Dage",
                Data = new List<double> { 680, 490 },
                BackgroundColor = GetRandomBackgroundColors()
            });

        return datasets;
    }

    private List<string> GetRandomBackgroundColors()
    {
        var colors = new List<string>();
        for (var index = 0; index < dataLabelsCount; index++)
        {
            colors.Add(backgroundColors![index]);
        }

        return colors;
    }

    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        var labels = new List<string>();
        for (var index = 0; index < numberOfLabels; index++)
        {
            labels.Add(GetNextDataLabel());
            dataLabelsCount += 1;
        }

        return labels;
    }

    private string GetNextDataLabel() => dataLabelsCount == 0 ? "Realiserede dage" : "Estimerede dage";


    private LineChart lineChart;

    private async Task RenderWormAsync()
    {
        var data = new ChartData
            {
                Labels = new List<string> { "Opstartsfasen", "Kravindsamling", "High-level Design", "Low-level Design", "Programmering", "Testing"},
                Datasets = new List<IChartDataset>()
            {
                new LineChartDataset()
                {
                    Label = "Realiserede dage",
                    Data = new List<double>{ 9, 20, 29, 33, 50, 66 },
                    BackgroundColor = new List<string>{ "#20c997" },
                    BorderColor = new List<string>{ "#20c997" },
                    BorderWidth = new List<double>{2},
                    HoverBorderWidth = new List<double>{4},
                    PointBackgroundColor = new List<string>{ "#20c997" },
                    PointBorderColor = new List<string>{ "#20c997" },
                    PointRadius = new List<int>{0}, 
                    PointHoverRadius = new List<int>{4},
                },

                new LineChartDataset()
                {
                    Label = "Estimerede dage",
                    Data = new List<double>{ 14, 22, 25, 50, 60, 67 },
                    BackgroundColor = new List<string>{ "#0d6efd" },
                    BorderColor = new List<string>{ "0d6efd" },
                    BorderWidth = new List<double>{2},
                    HoverBorderWidth = new List<double>{4},
                    PointBackgroundColor = new List<string>{ "0d6efd" },
                    PointBorderColor = new List<string>{ "0d6efd" },
                    PointRadius = new List<int>{0}, 
                    PointHoverRadius = new List<int>{4},
                },

            }
            };

        var options = new LineChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Responsive = true;

        //options.Scales.X.Title.Text = "Faser";
        //options.Scales.X.Title.Display = true;

        //options.Scales.Y.Title.Text = "Antal dage";
        //options.Scales.Y.Title.Display = true;

        await lineChart.InitializeAsync(data, options);
    }
}
