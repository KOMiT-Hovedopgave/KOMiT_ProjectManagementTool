@page "/"
@using KOMiT.Core.Model;
@inject HttpClient _httpClient


<h1>Hello, KOMiT!</h1>

@if (Projects == null)
{
    <h1>Loading...</h1>
}
else
{
    <Grid DataProvider="ProjectDataProvider" TItem="Project" AllowPaging="true" PageSize="15" AllowSorting="true">
        <GridColumn TItem="Project" HeaderText="Id" SortKeySelector=" Item => Item.Id">
            @context.Id
        </GridColumn>
        <GridColumn TItem="Project" HeaderText="Projekt" SortKeySelector=" Item => Item.Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="Project" HeaderText="Beskrivelse">
            @context.Description
        </GridColumn>
        <GridColumn TItem="Project" HeaderText="Projekttype" SortKeySelector=" Item => Item.ProjectType">
            @context.ProjectType.ToString()
        </GridColumn>
        <GridColumn TItem="Project" HeaderText="Prioritet" SortKeySelector=" Item => Item.Priority">
            @context.Priority.ToString()
        </GridColumn>
        <GridColumn TItem="Project" HeaderText="Status" SortKeySelector=" Item => Item.Status">
            @context.Status.ToString()
        </GridColumn>
             <GridColumn TItem="Project" HeaderText="Fase" SortKeySelector="Item => Item.CurrentPhases.FirstOrDefault().StandardPhase.Name">
            @foreach (var item in @context.CurrentPhases)
                {
                    <div class="is-link">@item.StandardPhase.Name</div>
                }
        </GridColumn>
         <GridColumn TItem="Project" HeaderText="Startdato" SortKeySelector="Item => Item.CurrentPhases.FirstOrDefault().EstimatedStartDate">
            @foreach (var item in @context.CurrentPhases)
                {
                    @item.EstimatedStartDate.ToShortDateString()
                }
        </GridColumn>
        <GridColumn TItem="Project" HeaderText="Næste delmål">
        </GridColumn>
             <GridColumn TItem="Project" HeaderText="Slutdato" SortKeySelector="Item => Item.CurrentPhases.FirstOrDefault().EstimatedEndDate">
            @foreach (var item in @context.CurrentPhases)
                {
                    @item.EstimatedEndDate.ToShortDateString()
                }
        </GridColumn>
        </Grid>
    }

@code {
    private ICollection<Project>? Projects { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Projects = await _httpClient.GetFromJsonAsync<ICollection<Project>>("https://localhost:7282/api/project/getall");
    }

    private async Task<GridDataProviderResult<Project>> ProjectDataProvider(GridDataProviderRequest<Project> request)
    {
        return await Task.FromResult(request.ApplyTo(Projects));
    }
}



